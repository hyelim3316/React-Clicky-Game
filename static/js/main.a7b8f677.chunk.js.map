{"version":3,"sources":["components/Card/index.js","components/Nav/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","onClick","clickChar","id","alt","src","image","Nav","message","score","topScore","Header","App","state","char","unclickedChar","_this","find","setState","filter","shuffle","arr","i","length","j","Math","floor","random","_ref","_this2","this","components_Nav","components_Header","map","components_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"i2CAaeA,MAVf,SAAcC,GACZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAAS,kBAAIL,EAAMM,UAAUN,EAAMO,MACvDN,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMO,GAAIE,IAAKT,EAAMU,iBCMtBC,MAVf,SAAaX,GACX,OACAC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kCACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uBAAd,eACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,wBAAwBJ,EAAMY,SAC5CX,EAAAC,EAAAC,cAAA,MAAIC,UAAU,wBAAd,UAA6CJ,EAAMa,MAAnD,mBAA0Eb,EAAMc,SAAhF,aCMWC,MAXf,WACE,OACAd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,wBACEH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,+ECoESY,6MAlEbC,MAAQ,CACNL,QAAS,2BACTM,OACAC,cAAeD,EACfL,MAAM,EACNC,SAAS,KAGXR,UAAY,SAAAC,GAENa,EAAKH,MAAME,cAAcE,KAAK,SAAAH,GAAI,OAAGA,EAAKX,KAAOA,IACnDa,EAAKE,SAAS,CACZT,MAAOO,EAAKH,MAAMJ,MAAQ,EAC1BM,cAAgBC,EAAKH,MAAME,cAAcI,OAAO,SAAAL,GAAI,OAAGA,EAAKX,KAAOA,IACnEK,QAAS,2BAKXQ,EAAKE,SAAS,CACZV,QAAS,2BACTO,cAAeC,EAAKH,MAAMC,KAC1BL,MAAO,EACPC,SAAWM,EAAKH,MAAMJ,MAAQO,EAAKH,MAAMH,SAAYM,EAAKH,MAAMJ,MAAQO,EAAKH,MAAMH,cAO1FU,QAAU,SAAAC,GACP,IAAK,IAAIC,EAAID,EAAIE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACrC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADLM,EAElB,CAACP,EAAIG,GAAIH,EAAIC,IAA/BD,EAAIC,GAFgCM,EAAA,GAE5BP,EAAIG,GAFwBI,EAAA,GAIzC,OAAOP,2EAGA,IAAAQ,EAAAC,KAET,OACEjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACgC,EAAD,CACEtB,MAAOqB,KAAKjB,MAAMJ,MAClBC,SAAUoB,KAAKjB,MAAMH,SACrBF,QAASsB,KAAKjB,MAAML,UAGtBX,EAAAC,EAAAC,cAACiC,EAAD,MAEFnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACd8B,KAAKV,QAAQU,KAAKjB,MAAMC,MAAMmB,IAAI,SAAAnB,GAAI,OAErCjB,EAAAC,EAAAC,cAACmC,EAAD,CACE/B,GAAIW,EAAKX,GACTgC,IAAKrB,EAAKX,GACVG,MAAOQ,EAAKR,MACZJ,UAAW2B,EAAK3B,uBA3DNkC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a7b8f677.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n  return(\n    <div className=\"col-3\">\n    <div className=\"card\" onClick={()=>props.clickChar(props.id)} >\n      <img alt={props.id} src={props.image} />\n    </div>\n    </div>\n  )\n}\n\nexport default Card;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Nav(props) {\n  return(\n  <ul className=\"nav justify-content-center row\">\n    <li className=\"logo nav-item col-4\">Clicky Game</li>\n    <li className=\"guess nav-item col-4\">{props.message}</li>\n    <li className=\"score nav-item col-4\">Score: {props.score}  |  Top score: {props.topScore} </li>\n  </ul>\n  )\n}\n\nexport default Nav;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header() {\n  return(\n  <div className=\"jumbotron d-flex align-items-center\">\n  <div className=\"container vertical-center\">\n    <h1 className=\"display-4\">Pokemon Clicky Game!</h1>\n      <p className=\"lead\">Click on an image to earn points, but don't click on any more than once!</p>\n  </div>\n  </div>\n  )\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport './App.css';\nimport char from './char.json';\nimport Card from './components/Card';\nimport Nav from './components/Nav/index.js';\nimport Header from './components/Header';\n\n\nclass App extends Component{\n\n  state = {\n    message: \"Click an image to begin!\",\n    char,\n    unclickedChar: char,\n    score:0,\n    topScore:0\n  };\n\n  clickChar = id => {\n    //correct, score+, game keep going\n    if (this.state.unclickedChar.find(char=> char.id === id)) {\n      this.setState({\n        score: this.state.score + 1,\n        unclickedChar : this.state.unclickedChar.filter(char=> char.id !== id),\n        message: \"Your guess is correct!\", \n        // topScore: this.state.score + 1\n      });\n     //incorrect, reset game\n    } else {\n      this.setState({\n        message: \"Your guess is incorrect!\",\n        unclickedChar: this.state.char,\n        score: 0,\n        topScore: (this.state.score > this.state.topScore) ? this.state.score : this.state.topScore\n      })\n    }\n    \n\n  }\n\n shuffle = arr =>  {\n    for (let i = arr.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    return arr;\n}\n\n  render() {\n\n  return (\n    <div className=\"App\">\n      <Nav \n        score={this.state.score}\n        topScore={this.state.topScore}\n        message={this.state.message}\n      />\n    {/* header */}\n      <Header />\n    {/* main part */}\n    <div className=\"row\">\n    {this.shuffle(this.state.char).map(char => (\n\n      <Card\n        id={char.id}\n        key={char.id}\n        image={char.image}\n        clickChar={this.clickChar}\n\n      />\n    ))}\n    </div>\n    </div>\n  );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}